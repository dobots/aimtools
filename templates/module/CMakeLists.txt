##########################################################################################
#               _/\/\/\/\/\____/\/\/\/\__/\/\/\/\/\____/\/\_______                       #
#               _/\/\____/\/\____/\/\____/\/\____/\/\__/\/\_______                       #
#               _/\/\/\/\/\______/\/\____/\/\____/\/\__/\/\_______                       #
#               _/\/\__/\/\______/\/\____/\/\____/\/\__/\/\_______                       #
#               _/\/\____/\/\__/\/\/\/\__/\/\/\/\/\____/\/\/\/\/\_                       #
#               __________________________________________________                       #
##########################################################################################
# Part of RIDL, the RUR IDL builder which generates modules for middlewares, including 
# lightweight (robotic) middleware like YARP. 
# This makefile is part of a cmake build system. The code falls under the Lesser General 
# Public License (LGPL GNU v3).

# Author:	 Anne C. van Rossum (Almende B.V.)
# Date: 	 Jun. 17, 2013
#
# ASCII Art generated by: http://www.network-science.de/ascii/ with font "ticks".
#
# Copyright Â© 2013 Anne van Rossum <anne@almende.com>
##########################################################################################

IF(WIN32)
cmake_minimum_required(VERSION 2.6)
ELSE(WIN32)
cmake_minimum_required(VERSION 2.4)
ENDIF(WIN32)

IF(COMMAND cmake_policy)
	cmake_policy(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

# Set name of project
SET(PROJECT_NAME "TemplateModule")

# Start a project
PROJECT(${PROJECT_NAME})

# The directory with some of the FindXXX modules
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")
MESSAGE(STATUS "Search for FindX files in ${CMAKE_SOURCE_DIR}/cmake")

##########################################################################################
# Include your own FindX cmake files and options in the following file!
##########################################################################################

INCLUDE(CustomBuild.cmake OPTIONAL)

##########################################################################################

# First set empty
SET(PARENT_INCLUDE_DIRS "")

# Include aim stuff
ADD_SUBDIRECTORY(aim-core)

# Get include directories
FOREACH(INCLDIR ${PARENT_INCLUDE_DIRS})
	MESSAGE(STATUS "Add ${INCLDIR}")
	INCLUDE_DIRECTORIES(${INCLDIR})
ENDFOREACH()

# Manually add some CXX flag (disabled by default because most cross-compilers choke on it)
# SET(CMAKE_CXX_FLAGS -std=c++11)

# Some debug information
MESSAGE(STATUS "\"${PROJECT_NAME}\" uses the following CXX flags: \"${CMAKE_CXX_FLAGS}\" (can be empty)")
MESSAGE(STATUS "Linked libraries: ${LIBS}")

# Source directory
SET(SOURCE_DIR "src")
SET(INCLUDE_DIR "inc")

# Search for functional source code
FILE(GLOB FOLDER_SOURCE ${SOURCE_DIR}/*.cpp ${SOURCE_DIR}/*.cc ${SOURCE_DIR}/*.c)
FILE(GLOB FOLDER_HEADER ${INCLUDE_DIR}/*.h ${INCLUDE_DIR}/*.hh ${INCLUDE_DIR}/*.hpp)

# For Visual Studio group the files
SOURCE_GROUP("Source files" FILES ${FOLDER_SOURCE})
SOURCE_GROUP("Header files" FILES ${FOLDER_HEADER})

# Automatically add include directories if needed.
FOREACH(HEADER_FILE ${FOLDER_HEADER})
	GET_FILENAME_COMPONENT(HEADER_DIR ${HEADER_FILE} PATH)
	INCLUDE_DIRECTORIES(${HEADER_DIR})
ENDFOREACH(HEADER_FILE ${FOLDER_HEADER})

# For references to header files
INCLUDE_DIRECTORIES(aim-core/inc)

get_property(dirs DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)
foreach(dir ${dirs})
	message(STATUS "INCLUDE_DIRECTORY='${dir}'")
endforeach()

SET(PROJECT_HEADER ../aim-core/inc/${PROJECT_NAME}.h)
IF (NOT EXISTS ${PROJECT_HEADER})
	MESSAGE(FATAL_ERROR "No ${PROJECT_HEADER} header file found."
		"Did the RurBuilder run and generate a header file (with content) in aim-core/inc?"
		"Did you perhaps forget to install omniidl/omniORB or do you need to update the RurBuilder itself?")
ENDIF() 

MESSAGE(STATUS "Header files included: ${AIM_HEADERS} ${FOLDER_HEADER}")

# Set up our main executable.
IF(FOLDER_SOURCE STREQUAL "")
	MESSAGE(FATAL_ERROR "No source code files found. Please add something")
ELSE ()
	ADD_EXECUTABLE(${PROJECT_NAME} ${FOLDER_SOURCE} ${AIM_SOURCES} ${FOLDER_HEADER} ${AIM_HEADERS})
	TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIBS})
	INSTALL(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin)
ENDIF ()

