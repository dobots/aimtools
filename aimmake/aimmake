#!/bin/bash

# Author: Anne C. van Rossum
# License: GNU LGPLv3 
# Date: Jun. 17, 2012

PROGRAM="aimmake"

VERSION="0.2"

#######################################################################################################################
# Default configuration
#######################################################################################################################

AIM_CONFIG_PATH=/etc/aim
AIM_CONFIG_FILE=/etc/aim/config.sh

source $AIM_CONFIG_FILE
source $AIM_CONFIG_COLOR
source $AIM_CONFIG_SANITY

#######################################################################################################################
# User configuration
#######################################################################################################################

if [ -e ${RUR_CONFIG_FILE_BACKENDS} ]; then
	source $RUR_CONFIG_FILE_BACKENDS
fi

#######################################################################################################################
# Argument checks
#######################################################################################################################

if [[ "$1" == "" ]]
then
	msg_error "No args supplied! Run $0 -h for more info"
	exit 1
fi

if [[ "$1" == "-h" ]]
then
	echo $PROGRAM $VERSION \- Usage
	echo 
	echo $PROGRAM \"ModuleName\"
	echo
	exit 0 
fi 

#######################################################################################################################
# Specific checks
#######################################################################################################################

modulename="$1"

aim_sanity $modulename error
if [[ "$error" != 0 ]]; then
	msg_error "Module name check failed. Unsafe to make"
	exit 1
fi

#######################################################################################################################
# Start
#######################################################################################################################

cd "$modulename"

target=standard

msg_info "Set installation dir and get color config"
source /etc/apt-cross/ac-build/ac_get.sh

#msg_info "Get platform specific compiler"
#source /etc/apt-cross/ac-platform/$target.sh

#######################################################################################################################
# Requires cmake build system
#######################################################################################################################

LOG_FILE=make.log
 
# Sets "CORES" and "AVAILABLE_CORES"
set_cores() {
	CORES=1
	AVAILABLE_CORES=$(nproc)
	msg_info "We will compile on ${CORES} of a total of ${AVAILABLE_CORES} cores"
	msg_info "Note that Unity/Ubuntu grinds to a halt if this reaches the total number of cores available)"
}
 
set_verbosity() {
	MAKE_VERBOSITY="VERBOSE=1"
	MAKE_VERBOSITY=
}
 
set_timing() {
        MAKE_TIMING=time
}
 
# Create log file and write everything to it
# Prerequisite for check_errors and check_warnings
set_logging() {
	rm -f ${LOG_FILE}
	PIPE_TO_FILE="3>&1 1>&2 2>&3 | tee ${LOG_FILE}"
}
 
# A log file is a prerequisite, assumes we are still in the build directory
# so create the script file in the parent directory ..
check_errors() {
	msg_debug "Check for errors"
	CHECK_FOR_ERROR="egrep '(error|instantiated from|relocation truncated)'"
	CHECK_FOR_ERROR_CMD="cat ${LOG_FILE} | ${CHECK_FOR_ERROR} | head -n 1"
	ERRORS=`eval ${CHECK_FOR_ERROR_CMD}`
	ERROR_SCRIPT=../check_error.sh
	rm -f ${ERROR_SCRIPT}
	if [ -n "$ERRORS" ]; then
		ERROR_FILE=`eval ${CHECK_FOR_ERROR_CMD} | cut -d':' -f1`
		ERROR_LINE=`eval ${CHECK_FOR_ERROR_CMD} | cut -d':' -f2`
		echo "#!/bin/bash" >> ${ERROR_SCRIPT}
		echo "# -- automatically generated --" >> ${ERROR_SCRIPT}
		echo "gedit ${ERROR_FILE} +${ERROR_LINE}" >> ${ERROR_SCRIPT}
		echo "echo \"Open ${ERROR_FILE} at line ${ERROR_LINE}\"" >> ${ERROR_SCRIPT}
		echo "echo \"because of error: \"" >> ${ERROR_SCRIPT}
		ESCAPE_ERRORS=`echo ${ERRORS} | sed 's|["'\''\`]||g'`
		echo "echo \"   ${ESCAPE_ERRORS} \"" >> ${ERROR_SCRIPT}
		chmod a+x ${ERROR_SCRIPT}
		msg_error "There are errors! Run ./check_error.sh"
	else
		msg_info "There are no errors found"
	fi
}
 
check_warnings() {
        msg_debug "Check for warnings"
        WARNINGS=`cat ${LOG_FILE} | grep "warning"`
        WARNING_SCRIPT=../check_warning.sh
        rm -f ${WARNING_SCRIPT}
        if [ -n "$WARNINGS" ]; then
                WARNING_FILE=`cat ${LOG_FILE} | grep "warning" | cut -d':' -f1`
                WARNING_LINE=`cat ${LOG_FILE} | grep "warning" | cut -d':' -f2`
                echo "gedit ${WARNING_FILE} +${WARNING_LINE}" >> ${WARNING_SCRIPT}
                chmod a+x ${WARNING_SCRIPT}
                msg_error "There are warnings! Run ./check_warning.sh"
        else
                msg_info "There are no warnings found"
        fi
}
 
make_and_check() {
        MAKE_COMMAND="${MAKE_VERBOSITY} ${MAKE_TIMING} make -j${CORES} ${PIPE_TO_FILE}"
        msg_debug "We will perform the following command:${MAKE_COMMAND}"
        eval ${MAKE_COMMAND}
 
        check_errors
        check_warnings
}

final_install() {
	make install
}

build() {
	msg_debug "Source aim-config/config.aim"
	source aim-config/config.aim
	msg_debug "Found as build_folder: ${build_folder}"

        mkdir -p ${build_folder}
        cd ${build_folder}
 
        set_cores
        set_verbosity
        set_timing
        set_logging
 
        cmake ../..
 
        make_and_check
#	final_install
 
        msg_info "The result of our compilation efforts:"
        cd ../..
        msg_info "$(file ${build_folder}/$modulename)"

}
 
msg_info "Build for platform $target"
build

