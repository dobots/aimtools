#!/bin/bash

PROGRAM="aimcreate-pkg"

VERSION="$PROGRAM 0.1"

####################################################################################################
# Default configuration
####################################################################################################

# Installation paths
RUR_BIN_PATH=/usr/bin
RUR_SHARE_PATH=/usr/share/rur
RUR_TEMPLATE_PATH=$RUR_SHARE_PATH/templates
RUR_BACKENDS_PATH=$RUR_SHARE_PATH/backends
RUR_CONFIG_PATH=/etc/rur
AIM_CONFIG_PATH=/etc/aim

# Configuration files
RUR_CONFIG_FILE_BACKENDS=${RUR_CONFIG_PATH}/backends.conf
RUR_CONFIG_FILE_BACKENDS_CMAKE=${RUR_CONFIG_PATH}/backends.cmake

# Prepend with destination dir if DESTDIR is present
RUR_SHARE_PATH="$DESTDIR/$RUR_SHARE_PATH"
RUR_TEMPLATE_PATH="$DESTDIR/$RUR_TEMPLATE_PATH"
RUR_BACKENDS_PATH="$DESTDIR/$RUR_BACKENDS_PATH"
RUR_CONFIG_PATH="$DESTDIR/$RUR_CONFIG_PATH"

# Default configuration files
AIM_CONFIG_COLOR=$AIM_CONFIG_PATH/color.sh
AIM_CONFIG_SANITY=$AIM_CONFIG_PATH/sanity.sh

####################################################################################################
# Tweaks and general configuration details
####################################################################################################

source $AIM_CONFIG_COLOR
source $AIM_CONFIG_SANITY

####################################################################################################
# User configuration
####################################################################################################

if [ -e ${RUR_CONFIG_FILE_BACKENDS} ]; then
	source $RUR_CONFIG_FILE_BACKENDS
fi

####################################################################################################
# Checks
####################################################################################################

if [[ "$1" == "" ]]
then
	echo "No args supplied! Run $0 -h for more info"
	exit 1
fi

if [[ "$1" == "-h" ]]
then
	echo $VERSION \- Usage
	echo
	echo "$PROGRAM \"ModuleName\" "
	echo "$PROGRAM \"ModuleName\" -b [STANDARD|YARP|ROS|ZEROMQ]"
	echo
	exit 0
fi

backend=
if [[ "$2" == "-b" ]]
then
	backend=$3
fi

####################################################################################################
# Specific checks
####################################################################################################

modulename="$1"

aim_sanity $modulename error
if [[ "$error" != 0 ]]; then
	msg_error "Module name check failed, there are many reasons to construct a specific name of the form \"*Module\". The main reason here is to allow easy checks on execution on a server. Although the modules created by aimcreate-pkg should run in for example a Linux Container, remote execution of modules is key to many applications. Hence, it is nice to be able to perform some basic checking if there are no system utilities called by third parties. Although only binaries should be called that are registered by aim-registry a specific naming convention allows for an additional sanity check."
	exit 1
fi

####################################################################################################
# Start
####################################################################################################

# Create the proper directory
msg_info "Create the directory $modulename"
mkdir -p "$modulename"
cd "$modulename"

mkdir -p aim

# Copy from template directory
thispath=$(pwd)
msg_info "Copy from template directory $RUR_TEMPLATE_PATH to \"$thispath\"/aim"
cp -r $RUR_TEMPLATE_PATH/* aim
cd aim

# Adapt scripts to $modulename
msg_info "Adapt template scripts to use $modulename"
sed -i -e "s/TemplateModule/$modulename/g" TemplateModule.idl
sed -i -e "s/TemplateModule/$modulename/g" TemplateModuleMain.cpp
sed -i -e "s/TemplateModule/$modulename/g" TemplateModuleExt.cpp
sed -i -e "s/TemplateModule/$modulename/g" TemplateModuleExt.h
sed -i -e "s/TemplateModule/$modulename/g" CMakeLists.txt.parent
sed -i -e "s/TemplateModule/$modulename/g" Makefile.parent
sed -i -e "s/TemplateModule/$modulename/g" package.xml
sed -i -e "s/TemplateModule/$modulename/g" manifest.xml

msg_info "Move parent files to root directory of $modulename"
mv CMakeLists.txt.parent ../CMakeLists.txt
mv Makefile.parent ../Makefile

msg_info "Move idl file to separate directory"
mkdir -p idl
if [ -a "idl/$modulename.idl" ]; then
	msg_info "The idl file exists already, we will not overwrite it in case it has been adapted"
else
	mv TemplateModule.idl "idl/$modulename.idl"
fi

if [ -n "$backend" ]; then
	msg_info "We will use backend: $backend, feel free to use other ones later on!"
	sed -i "s/set(BUILD_STANDARD on)/set(BUILD\_$backend on)/g" default.cmake
fi

# Move relevant files to the inc/ directory
msg_info "Move header files to inc/ directory"
#mkdir -p src
mkdir -p inc

mv TemplateModuleExt.h "inc/${modulename}Ext.h"

# Move relevant files to the ../src/ directory
msg_info "Move source files to src/ directory"
mkdir -p ../src

mv TemplateModuleMain.cpp "../src/${modulename}Main.cpp"
#mv TemplateModule.cpp "../src/${modulename}.cpp"
mv TemplateModuleExt.cpp "../src/${modulename}Ext.cpp"

#mkdir -p ../src

#cp "src/${modulename}Main.cpp" "../src/${modulename}Main.cpp"
#cp "src/${modulename}.cpp" "../src/${modulename}.cpp"
msg_info "Done! Type make and you are good to go!"

