#!/bin/bash

# Author: Anne C. van Rossum
# License: GNU LGPLv3
# Date: Jun. 17, 2012

PROGRAM="aimcreate-pkg"

VERSION="0.3"

#######################################################################################################################
# Default configuration
#######################################################################################################################

AIM_CONFIG_PATH=/etc/aim
AIM_CONFIG_FILE=/etc/aim/config.sh

source $AIM_CONFIG_FILE
source $AIM_CONFIG_COLOR
source $AIM_CONFIG_SANITY

msg_init $PROGRAM

#######################################################################################################################
# User configuration
#######################################################################################################################

if [ -e ${RUR_CONFIG_FILE_BACKENDS} ]; then
	source $RUR_CONFIG_FILE_BACKENDS
fi

#######################################################################################################################
# Argument checks
#######################################################################################################################

if [[ $AIM_VERSION != $VERSION ]]; then
	msg_error "${PROGRAM} is version ${VERSION}, while it should be version ${AIM_VERSION}."
	exit 0
fi

if [[ "$1" == "" ]]
then
	msg_error "No args supplied! Run $0 -h for more info"
	exit 1
fi

if [[ "$1" == "-h" ]]
then
	echo $PROGRAM $VERSION \- Usage
	echo
	echo "$PROGRAM \"ModuleName\" "
	echo "$PROGRAM \"ModuleName\" -b [STANDARD|YARP|ROS|ZEROMQ|NODEJS]"
	echo
	exit 0
fi

backend=
if [[ "$2" == "-b" ]]
then
	backend=$3
fi

####################################################################################################
# Specific checks
####################################################################################################

modulename="$1"

aim_sanity $modulename error
if [[ "$error" != 0 ]]; then
	msg_error "Module name check failed, there are many reasons to construct a specific name of the form \"*Module\". The main reason here is to allow easy checks on execution on a server. Although the modules created by aimcreate-pkg should run in for example a Linux Container, remote execution of modules is key to many applications. Hence, it is nice to be able to perform some basic checking if there are no system utilities called by third parties. Although only binaries should be called that are registered by aim-registry a specific naming convention allows for an additional sanity check."
	exit 1
fi

if [ -e $modulename ]; then
	msg_error "\"${modulename}\" already exists!"
	exit 1
fi

####################################################################################################
# Functions
####################################################################################################

update_personal_info() {
	working_path=$1
	
	if [ -e $HOME/.rur/personal_info.txt ]; then
		source $HOME/.rur/personal_info.txt
	else
		source $RUR_CONFIG_PATH/personal_info.txt
	fi
	find $working_path -not -iwholename '*.svn' -type f | xargs sed -i -e "s|\${yourname}|$yourname|g"
	find $working_path -not -iwholename '*.svn' -type f | xargs sed -i -e "s|\${youremail}|$youremail|g"
	find $working_path -not -iwholename '*.svn' -type f | xargs sed -i -e "s|\${yourorganisation}|$yourorganisation|g"
	find $working_path -not -iwholename '*.svn' -type f | xargs sed -i -e "s|\${yourproject}|$yourproject|g"
	find $working_path -not -iwholename '*.svn' -type f | xargs sed -i -e "s|\${license}|$license|g"
	find $working_path -not -iwholename '*.svn' -type f | xargs sed -i -e "s|\${license_abbreviation}|$license_abbreviation|g"
	
	thisyear=$(date +"%Y")
	thisdate=$(date +"%b %e, %Y")
	find $working_path -not -iwholename '*.svn' -type f | xargs sed -i -e "s|\${year}|$thisyear|g"
	find $working_path -not -iwholename '*.svn' -type f | xargs sed -i -e "s|\${date}|$thisdate|g"
}

####################################################################################################
# Start
####################################################################################################

# Create the proper directory
msg_info "Create the directory $modulename"
mkdir -p "$modulename"
cd "$modulename"
modulepath=$(pwd)
msg_info "Copy from templates from \"$RUR_TEMPLATE_PATH/\" to \"$modulepath/\""
cp -ir $RUR_TEMPLATE_PATH/* .

msg_info "Create masks for build directories in a .gitignore file"
echo "builds/" >> .gitignore
echo "aim-devel/" >> .gitignore

msg_info "Adapt template files to use $modulename (recursive sed operation)"
# Not using -print0, since that is GNU only. Filenames should not contain any blanks!
find . -not -iwholename '*.svn' -type f | xargs sed -i -e "s/TemplateModule/$modulename/g"

# also replace template module in lower case
modulename_lc=$(echo $modulename | tr '[:upper:]' '[:lower:]')
find . -not -iwholename '*.svn' -type f | xargs sed -i -e "s/templatemodule/$modulename_lc/g"

for F in $(find . -type f -name 'TemplateModule*'); do
	mv $F ${F/TemplateModule/$modulename}
done

update_personal_info $modulepath

if [ -n "$backend" ]; then
	msg_info "We will use backend: $backend, feel free to use other ones later on!"
	sed -i "s/set(BUILD_STANDARD on)/set(BUILD\_$backend on)/g" aim-core/default.cmake
fi

msg_info "Done!"
msg_info "Type \"aimmake ${modulename}\" and you are good to go!"
msg_info "Optionally: change middleware by \"aimselect ${modulename} nodejs\""

