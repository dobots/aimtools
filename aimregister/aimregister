#!/bin/bash

# Author: Anne C. van Rossum
# License: GNU LGPLv3 
# Date: Jun. 17, 2012

PROGRAM="aimregister"

VERSION="0.3"

#######################################################################################################################
# Default configuration
#######################################################################################################################

AIM_CONFIG_PATH=/etc/aim
AIM_CONFIG_FILE=/etc/aim/config.sh

source $AIM_CONFIG_FILE
source $AIM_CONFIG_COLOR
source $AIM_CONFIG_SANITY

msg_init $PROGRAM

#######################################################################################################################
# User configuration
#######################################################################################################################

if [ -e ${RUR_CONFIG_FILE_BACKENDS} ]; then
	source $RUR_CONFIG_FILE_BACKENDS
fi

#######################################################################################################################
# Argument checks
#######################################################################################################################

if [[ $AIM_VERSION != $VERSION ]]; then
	msg_error "${PROGRAM} is version ${VERSION}, while it should be version ${AIM_VERSION}."
	exit 0
fi

# Check if we have sudo rights, we should NOT
if [ `id -u` -eq 0 ]
then
	msg_error "Sorry, should NOT be run as super user":
	exit 1
fi

if [[ "$1" == "" ]]
then
	msg_error "No args supplied! Run $0 -h for more info"
	exit 1
fi

if [[ "$1" == "-h" ]]
then
	echo $PROGRAM $VERSION \- Usage
	echo 
	echo $PROGRAM \"ModuleName\"
	echo
	exit 0 
fi 

#######################################################################################################################
# Actual script content
#######################################################################################################################

mkdir -p $RUR_DATA_PATH
mkdir -p $RUR_REGISTRY_PATH

MODULE_NAME=${1%/}

CONFIG_FOLDER=${MODULE_NAME}/aim-config
CORE_FOLDER=${MODULE_NAME}/aim-core

DEPLOYMENT_FILE=${CORE_FOLDER}/aim_deployment.json
CONFIG_FILE=${CONFIG_FOLDER}/config.aim

msg_info "Check ${MODULE_NAME} directory and default build location if there is a compiled binary"
if [ ! -e "${MODULE_NAME}" ]; then
	msg_error "Cannot find \"${MODULE_NAME}\""
	exit 0
fi

FULL_MODULE_NAME="$(readlink --canonicalize --no-newline $MODULE_NAME)"
msg_info "Full name to register: ${FULL_MODULE_NAME}"

echo "$MODULE_NAME = $FULL_MODULE_NAME" >> "${AIM_REGISTRY}"

# Remove duplicate entries
msg_info "Remove duplicate entries from registry"
uniq "${AIM_REGISTRY}" | tac > reversed.txt
awk '!x[$1]++' FS=\= reversed.txt | tac > "${AIM_REGISTRY}"
rm reversed.txt

# Create registry directory with port names for each module
msg_info "Use rur-builder with specific backend \"extract\" to extract the ports from the idl file"
if [ ! -e "${RUR_BACKENDS_PATH}/extract.py" ]; then
	msg_error "There is no extract backend in ${RUR_BACKENDS_PATH}. Did you install a recent version of the rur-builder?"
	exit 0
fi
#rur-builder -b extract -i ${IDL_FOLDER}/${MODULE_NAME}.idl -p ${RUR_BACKENDS_PATH} -o "." -n "ports.txt"
#echo "omniidl -p${RUR_BACKENDS_PATH} -brur_extract -Wbstandard -K \"${IDL_FOLDER}/${MODULE_NAME}.idl\" > ports.txt" 
omniidl -p${RUR_BACKENDS_PATH} -brur_extract -Wbstandard -K "${CONFIG_FOLDER}/${MODULE_NAME}.idl" > "ports.txt"

msg_info "Read configuration file $CONFIG_FILE"
source ${CONFIG_FILE}

if [ "${application_type}" == "" ]; then
	msg_error "Please, set \"application_type\" in $CONFIG_FILE" 
	exit
fi
if [ "${android_package}" == "" ]; then
	msg_error "Please, set \"android_package\" in $CONFIG_FILE" 
	exit
fi
if [ "${android_url}" == "" ]; then
	msg_error "Please, set \"android_url\" in $CONFIG_FILE" 
	exit
fi
if [ "${description}" == "" ]; then
	msg_error "Please, set \"description\" in $CONFIG_FILE" 
	exit
fi
if [ "${enable}" == "" ]; then
	msg_error "Please, set \"enable\" in $CONFIG_FILE" 
	exit
fi

# The result will be something like this:
# {
#	"name": "SomeModule",
#	"type": "UI",
#	"description: "Amazing skills",
#	"enable": "true",
#	"android": {
#   		"package": "com.example.somemodule",
#		"url": "https://play.google.com/store/apps/details?id=com.example.somemodule"
#	},
#	"ports": [
#		{
#			"name": "microphone",
#			"dir": "in",
#			"type": "floatarray"
#		},
#		{
#			"name": "command",
#			"dir": "out",
#			"type": "float",
#			"middleware": "yarp"
#		}
#	]
#}

msg_info "Write deployment information to $DEPLOYMENT_FILE"
echo '{' > $DEPLOYMENT_FILE
echo -e "\t\"name\":\"${MODULE_NAME}\"," >> $DEPLOYMENT_FILE
echo -e "\t\"type\":\"${application_type}\"," >> $DEPLOYMENT_FILE
echo -e "\t\"description\":\"${description}\"," >> $DEPLOYMENT_FILE
echo -e "\t\"enable\":\"${enable}\"," >> $DEPLOYMENT_FILE
echo -e "\t\"android\": {" >> $DEPLOYMENT_FILE
echo -e "\t\t\"package\":\"${android_package}\"," >> $DEPLOYMENT_FILE
echo -e "\t\t\"url\":\"${android_url}\"" >> $DEPLOYMENT_FILE
echo -e "\t}," >> $DEPLOYMENT_FILE
echo -e "\t\"ports\": [" >> $DEPLOYMENT_FILE

port_cnt=$(< ports.txt wc -l)
#msg_info "Write $port_cnt ports"

# write now all the port information to the file
index=0
while read line; do
	read -a array <<< "$line"
	((index++))
	echo -e "\t\t{" >> $DEPLOYMENT_FILE
	echo -e "\t\t\t\"name\":\"${array[1]}\"," >> $DEPLOYMENT_FILE
	echo -e "\t\t\t\"dir\":\"${array[0]}\"," >> $DEPLOYMENT_FILE
	echo -e "\t\t\t\"type\":\"${array[3]}\"," >> $DEPLOYMENT_FILE
	echo -e "\t\t\t\"middleware\":\"${array[2]}\"" >> $DEPLOYMENT_FILE
	if [ "$index" -eq "$port_cnt" ]; then
		echo -e "\t\t}" >> $DEPLOYMENT_FILE
	else
		echo -e "\t\t}," >> $DEPLOYMENT_FILE
	fi
done <ports.txt
echo -e "\t]" >> $DEPLOYMENT_FILE
echo '}' >> $DEPLOYMENT_FILE

msg_info "Write port definition to ${MODULE_NAME}.ports file in registry"
mv ports.txt ${RUR_REGISTRY_PATH}/${MODULE_NAME}.ports

